/**
 * @fileoverview gRPC-Web generated client stub for calculator
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v4.23.0
// source: calculator.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as calculator_pb from './calculator_pb';


export class CalculateClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSum = new grpcWeb.MethodDescriptor(
    '/calculator.Calculate/Sum',
    grpcWeb.MethodType.UNARY,
    calculator_pb.SumRequest,
    calculator_pb.SumResponse,
    (request: calculator_pb.SumRequest) => {
      return request.serializeBinary();
    },
    calculator_pb.SumResponse.deserializeBinary
  );

  sum(
    request: calculator_pb.SumRequest,
    metadata: grpcWeb.Metadata | null): Promise<calculator_pb.SumResponse>;

  sum(
    request: calculator_pb.SumRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: calculator_pb.SumResponse) => void): grpcWeb.ClientReadableStream<calculator_pb.SumResponse>;

  sum(
    request: calculator_pb.SumRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: calculator_pb.SumResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/calculator.Calculate/Sum',
        request,
        metadata || {},
        this.methodDescriptorSum,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/calculator.Calculate/Sum',
    request,
    metadata || {},
    this.methodDescriptorSum);
  }

}

